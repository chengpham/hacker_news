{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","mappers/mapTime.js","components/Story.js","styles/StoryContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newsStoryUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","timeAgo","timestamp","times","diff","Math","round","Date","t","length","Story","memo","useState","story","setStory","useEffect","data-testid","href","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","context","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","console","log","slice","map","App","render","getElementById"],"mappings":"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","file":"static/js/main.6cc3fca1.chunk.js","sourcesContent":["export const selectFields = ({id, by, url, time, title} = {})=>({\r\n    id, \r\n    by, \r\n    url, \r\n    time, \r\n    title\r\n})","import axios from \"axios\";\r\nimport {selectFields} from \"../selectors/selectFields\"\r\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/'\r\nexport const newsStoryUrl = `${baseUrl}newstories.json`\r\nexport const storyUrl = `${baseUrl}item/`\r\n\r\nexport const getStory = async storyId => {\r\n    const result = await axios.get(`${storyUrl + storyId}.json`).then(({data})=>data && selectFields(data))\r\n    return result\r\n}\r\nexport const getStoryIds = async ()=>{\r\n    const result = await axios.get(newsStoryUrl).then(data=> data)\r\n    return result\r\n}","import styled from 'styled-components';\r\n\r\nexport const StoryWrapper = styled.section`\r\n    padding-top: 10px;\r\n    margin-bottom: 20px;\r\n    border-top: 1px solid #cccccc;\r\n\r\n    &:first-of-type {\r\n        border-top: 0;\r\n    }\r\n    &:last-of-type {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n`;\r\n\r\nexport const StoryTitle = styled.h1`\r\n    margin-bottom: 5px;\r\n    font-size: 18px;\r\n    line-height: 1.8;\r\n    margin: 0;\r\n    text-decoration: none;\r\n    a {\r\n        color: #2e2e2c;\r\n        background-color: #f8dc3d;\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\n    font-style: italic;\r\n\r\n    \r\n    >span:not(:first-child):before{\r\n        content: \"-\";\r\n        margin: 0 7px;\r\n    }\r\n    .story_meta-bold{\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport const StoryMetaElement = styled.span`\r\n    font-weight: bold;\r\n    color: ${props => props.color || 'red'};\r\n`;\r\n\r\n","export const mapTime = timestamp =>{\r\n    const seconds = Math.floor((new Date() - timestamp * 1000) /1000)\r\n    let interval = Math.floor(seconds / 31536000)\r\n    if (interval > 1){ return `${interval} years` }\r\n    interval = Math.floor(seconds / 2592000)\r\n    if (interval > 1){ return `${interval} months` }\r\n    interval = Math.floor(seconds /86400)\r\n    if (interval >1){ return `${interval} days` }\r\n    interval = Math.floor(seconds /3600)\r\n    if (interval >1){ return `${interval} hours` }\r\n    interval=Math.floor(seconds / 60)\r\n    if (interval > 1){ return `${interval} minutes` }\r\n    return `${Math.floor(seconds)} seconds`\r\n}\r\nexport const timeAgo = timestamp => {\r\n    const times = [[\"second\", 1], [\"minute\", 60], [\"hour\", 3600], [\"day\", 86400], [\"week\", 604800], [\"month\", 2592000], [\"year\", 31536000]] \r\n    let diff = Math.round((new Date() - timestamp * 1000) / 1000) \r\n    for (let t = 0; t < times.length; t++) { \r\n        if (diff < times[t][1]) { \r\n            if(t == 0) { return \"Just now\" } else { \r\n             diff = Math.round(diff / times[t - 1][1]); return diff + \" \" + times[t - 1][0] + (diff == 1?\" ago\":\"s ago\") } \r\n         } \r\n    } \r\n}","/* eslink-disable react-hooks/exhaustive-deps */\r\nimport React, {useState, useEffect, memo} from 'react';\r\nimport {getStory} from '../services/hnApi'\r\nimport {StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement} from '../styles/StoryStyles'\r\nimport {timeAgo} from \"../mappers/mapTime\"\r\n\r\nexport const Story = memo(function Story({storyId}){\r\n    const [story,setStory] = useState({});\r\n    useEffect(()=>{\r\n        getStory(storyId).then(data=> data && data.url && setStory(data))\r\n    }, []);\r\n\r\n    return story && story.url ? (\r\n        <StoryWrapper data-testid=\"story\">\r\n        <StoryTitle><a href={story.url}>{story.title}</a></StoryTitle>\r\n        <StoryMeta>\r\n            <span data-testid=\"story_by\">\r\n                <StoryMetaElement color=\"#000\">By: </StoryMetaElement>{story.by}\r\n            </span>\r\n            <span data-testid=\"story_time\">\r\n                <StoryMetaElement color=\"#000\">Posted: </StoryMetaElement>{timeAgo(story.time)}\r\n            </span>\r\n        </StoryMeta>\r\n        </StoryWrapper>\r\n    ) : null\r\n})","import styled, {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        -webkit-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n    }\r\n    *, *:before, *:after {\r\n        -webkit-box-sizing: inherit;\r\n        box-sizing: inherit;\r\n    }\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        line-height: 1;\r\n        color: #202020;\r\n        background-color: #fafafe;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n        font-size: 16px;\r\n    }\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nexport const StoriesContainerWrapper = styled.main`\r\n    max-width: 500px;\r\n    padding: 20px 15px;\r\n    margin: auto;\r\n`;","import {useState, useEffect} from \"react\";\r\nimport {STORY_INCREMENT, MAX_STORIES} from \"../constants\"\r\nimport {debounce} from \"../utils/debounce\"\r\n\r\nexport const useInfiniteScroll = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [count, setCount] = useState(STORY_INCREMENT)\r\n\r\n    const handleScroll = debounce(()=>{\r\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {return false}\r\n        setLoading(true)\r\n    }, 500)\r\n    useEffect(()=>{\r\n        if (!loading) return;\r\n        if (count + STORY_INCREMENT >= MAX_STORIES){\r\n            setCount(MAX_STORIES)\r\n        } else {\r\n            setCount(count + STORY_INCREMENT)\r\n        }\r\n        setLoading(false)\r\n    }, [loading])\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener('scroll', handleScroll)\r\n        return () => window.removeEventListener('scroll', handleScroll)\r\n    }, [])\r\n    return {count}\r\n}","export const MAX_STORIES = 500\r\nexport const STORY_INCREMENT = 30","export const debounce = (func, wait, immediate, args) =>{\r\n    let timeout;\r\n    return () => {\r\n        const context = this;\r\n        const callNow = immediate && !timeout;\r\n        const later = () =>{\r\n            timeout = null;\r\n            if (!immediate) func.apply(context, args)\r\n        }\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait)\r\n        if (callNow) func.apply(context, args)\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {getStoryIds, getStory} from \"../services/hnApi\"\r\nimport {Story} from \"../components/Story\"\r\nimport {GlobalStyle, StoriesContainerWrapper} from \"../styles/StoryContainerStyles\"\r\nimport {useInfiniteScroll} from \"../hooks/useInfiniteScroll\"\r\n\r\nexport const StoriesContainer = ()=>{\r\n    const {count} = useInfiniteScroll()\r\n    const [storyIds, setStoryIds] = useState([])\r\n    \r\n    useEffect(()=>{\r\n      console.log(\"count\", count)\r\n      getStoryIds().then(data=>setStoryIds(data));\r\n    },[])\r\n    if (storyIds.length == 0){ return null }\r\n  \r\n    return (\r\n    <>\r\n    <GlobalStyle />\r\n    <StoriesContainerWrapper data-testid=\"stories-container\">\r\n    <h1>Hacker News Stories</h1>\r\n    {storyIds.data.slice(0,count).map(storyId => <Story key={storyId} storyId={storyId}/>)}\r\n    </StoriesContainerWrapper>\r\n   </>\r\n    )\r\n  }\r\n  \r\n","\nimport React, {useEffect, useState} from \"react\";\nimport {StoriesContainer} from './containers/StoriesContainer'\n\nexport const App = ()=> <StoriesContainer />\n\n\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nrender( <App />, document.getElementById('root') );\n"],"sourceRoot":""}